package beans;

import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import java.util.Properties;
import java.util.stream.Collectors;

import static beans.IDs.*;
/*
 */
public class OperationsParameters {

	private Properties context;

	private Map<String, Map<String, String>> operationsParameters = new HashMap<String, Map<String, String>>();
	
	public OperationsParameters(Properties context) {
		this.context = context;
		init();
	}
	
	private void init() {
		
		/*
		 * Contact Core
		 */
		add("CONTACT_CORE_US",
			entry(DARWIN_SERVICE_URI, context.get("darwin_contactUri")),
			entry(DARWIN_ENTITY_SET, "Contacts"),
			entry(DARWIN_ENTITY_DESTINATION, context.get("activemq_contactQueue")),
			entry("apiRouteId", "CONTACT_CORE_US")
		);
		
		/*
		 * Contact Children
		 */
		add("CONTACT_PHONE_US",
			entry(DARWIN_SERVICE_URI, context.get("darwin_contactUri")),
			entry(DARWIN_ENTITY_SET, "Phones"),
			entry(DARWIN_ENTITY_DESTINATION, context.get("activemq_phoneDetailsQueue")),
			entry("apiRouteId", "CONTACT_PHONE_US")
		);

		/*
		 * Organization Core
		 */
		add("ORGANIZATION_ACCOUNT_US",
			entry(DARWIN_SERVICE_URI, context.get("darwin_organizationUri")),
			entry(DARWIN_ENTITY_SET, "Organizations"),
			entry(DARWIN_ENTITY_DESTINATION, context.get("activemq_organizationQueue")),
			entry("apiRouteId", "ORGANIZATION_ACCOUNT_US")
		);

		/*
		 * Organization Children
		 */
		add("ORGANIZATION_ADDRESS_US",
			entry(DARWIN_SERVICE_URI, context.get("darwin_organizationUri")),
			entry(DARWIN_ENTITY_SET, "Addresss"),
			entry(DARWIN_ENTITY_DESTINATION, context.get("activemq_addressQueue")),
			entry("parentID", "OrganizationRid"),
			entry("apiRouteId", "ORGANIZATION_ADDRESS_US"),
			entry("nextOperation", "ORGANIZATION_TERRITORY_US")
		);

		add("ORGANIZATION_TERRITORY_US",
			entry(DARWIN_SERVICE_URI, context.get("darwin_organizationUri")),
			entry(DARWIN_ENTITY_SET, "Territorys"),
			entry(DARWIN_ENTITY_DESTINATION, context.get("activemq_organizationTerritory")),
			entry("parentID", "OrganizationRid"),
			entry("apiRouteId", "ORGANIZATION_TERRITORY_US"),
			entry("nextOperation", "ORGANIZATION_NAME_US")
		);

		add("ORGANIZATION_NAME_US",
			entry(DARWIN_SERVICE_URI, context.get("darwin_organizationUri")),
			entry(DARWIN_ENTITY_SET, "Names"),
			entry(DARWIN_ENTITY_DESTINATION, context.get("activemq_nameQueue")),
			entry("apiRouteId", "ORGANIZATION_NAME_US"),
			entry("parentID", "OrganizationRid"),
			entry("nextOperation", "ORGANIZATION_PHONE_US")
		);
 
		add("ORGANIZATION_PHONE_US",
			entry(DARWIN_SERVICE_URI, context.get("darwin_organizationUri")),
			entry(DARWIN_ENTITY_SET, "Phones"),
			entry(DARWIN_ENTITY_DESTINATION, context.get("activemq_phoneQueue")),
			entry("apiRouteId", "ORGANIZATION_PHONE_US"),
			entry("parentID", "OrganizationRid"),
			entry("nextOperation", "ORGANIZATION_ATTRIBUTE_US")
		);

		add("ORGANIZATION_ATTRIBUTE_US",
			entry(DARWIN_SERVICE_URI, context.get("darwin_organizationUri")),
			entry(DARWIN_ENTITY_SET, "Attributes"),
			entry(DARWIN_ENTITY_DESTINATION, context.get("activemq_attributeQueue")),
			entry("parentID", "OrganizationRid"),
			entry("apiRouteId", "ORGANIZATION_ATTRIBUTE_US"),
			entry("nextOperation", "ORGANIZATION_IDENTIFIER_US")
		);

		add("ORGANIZATION_IDENTIFIER_US",
			entry(DARWIN_SERVICE_URI, context.get("darwin_organizationUri")),
			entry(DARWIN_ENTITY_SET, "Identifiers"),
			entry(DARWIN_ENTITY_DESTINATION, context.get("activemq_identifierQueue")),
			entry("apiRouteId", "ORGANIZATION_IDENTIFIER_US"),
			entry("parentID", "OrganizationRid")
		);
		
		/*
		 * Key Contact
		 */
		add("Core_KeyContact",
			entry(DARWIN_SERVICE_URI, context.get("darwin_organizationUri")),
			entry(DARWIN_ENTITY_SET, "Organizations"),
			entry(DARWIN_ENTITY_DESTINATION, context.get("activemq_organization4Key_contactQueue"))
		);


		/*
		 * Organization Relationship
		 */
		add("OrganizationRelationship",
			entry(DARWIN_SERVICE_URI, context.get("darwin_organizationUri")),
			entry(DARWIN_ENTITY_SET, "Relationships"),
			entry(DARWIN_ENTITY_DESTINATION, context.get("activemq_organizationRelationship"))
		);

		/*
		 * Organization Relationship
		 */
		add("OrganizationRelationship",
			entry(DARWIN_SERVICE_URI, context.get("darwin_organizationUri")),
			entry(DARWIN_ENTITY_SET, "Relationships"),
			entry(DARWIN_ENTITY_DESTINATION, context.get("activemq_organizationRelationship"))
		);

		/*
		 * Crop Master Data
		 */
		add("CropMaster",
			entry(DARWIN_SERVICE_URI, context.get("darwin_cropUri")),
			entry(DARWIN_ENTITY_SET, "USHierarchys"),
			entry(DARWIN_ENTITY_DESTINATION, context.get("activemq_cropmaster"))
		);

		/*
		 * Territory Hierarchy Master Data
		 */
		add("TerritoryHierarchy",
			entry(DARWIN_SERVICE_URI, context.get("darwin_territoryUri")),
			entry(DARWIN_ENTITY_SET, "Territorys"),
			entry(DARWIN_ENTITY_DESTINATION, context.get("activemq_territoryQueue"))
		);  

		/*
		 * Crop Area Detail
		 */
		add("CropArea",
			entry(DARWIN_SERVICE_URI, context.get("darwin_cropareaUri")),
			entry(DARWIN_ENTITY_SET, "CropAreas"),
			entry(DARWIN_ENTITY_DESTINATION, context.get("activemq_cropareaDetails"))
		);  

		/*
		 * UsNationalHierarchy
		 */
		add("UsNationalHierarchy",
			entry(DARWIN_SERVICE_URI, context.get("darwin_organizationUri")),
			entry(DARWIN_ENTITY_SET, "UsNationalHierarchys"),
			entry(DARWIN_ENTITY_DESTINATION, context.get("activemq_organizationUsNationalHierarchy"))
		);  

		/*
		 * Sales
		 */
		add("Sales",
			entry(DARWIN_SERVICE_URI, context.get("darwin_salesUri")),
			entry(DARWIN_ENTITY_SET, "Sales"),
			entry(DARWIN_ENTITY_DESTINATION, context.get("activemq_salesQueue"))
		);  
		
		initMaterial();
	}
	
	private void easyInit(String apiRouteId, String serviceUri, String entitySet, String destination) {
		add(apiRouteId,
				entry(DARWIN_SERVICE_URI, context.get(serviceUri)),
				entry(DARWIN_ENTITY_SET, entitySet),
				entry(DARWIN_ENTITY_DESTINATION, context.get(destination)),
				entry("apiRouteId", apiRouteId)
			);
	}
	
	private void initMaterial() {
		String serviceuUri = "darwin_materialUri";
		easyInit("MATERIAL_CORE_US", serviceuUri, "Materials", "activemq_material");
		easyInit("MATERIAL_INDICATOR_US", serviceuUri, "Indicators", "activemq_materialIndicator");
		easyInit("MATERIAL_SAP_ATTRIBUTE_US", serviceuUri, "SAPAttributes", "activemq_materialSapAttribute");
		easyInit("MATERIAL_UNIT_OF_MEASURE_US", serviceuUri, "UnitOfMeasures", "activemq_materialUnitOfMeasure");
		easyInit("MATERIAL_US_CROP_HIERARCHY_US", serviceuUri, "UsCropHierarchys", "activemq_materialUsCropHierarchy");
		easyInit("MATERIAL_US_SEED_HIERARCHY_US", serviceuUri, "UsSeedHierarchys", "activemq_materialUsSeedHierarchy");
		
//		/*
//		 * Material Children
//		 */
//		add("MATERIAL_INDICATOR_US",
//			entry(DARWIN_SERVICE_URI, context.get("darwin_materialUri")),
//			entry(DARWIN_ENTITY_SET, "Indicators"),
//			entry(DARWIN_ENTITY_DESTINATION, context.get("activemq_materialIndicator")),
//			entry("apiRouteId", "MATERIAL_INDICATOR_US")
//		);

//		/*
//		 * Material SAP Attributes
//		 */
//		add("MaterialSAPAttributes",
//			entry(DARWIN_SERVICE_URI, context.get("darwin_materialUri")),
//			entry(DARWIN_ENTITY_SET, "SAPAttributes"),
//			entry(DARWIN_ENTITY_DESTINATION, context.get("activemq_materialSapAttribute")),
//			entry("parentID", "MaterialRid"),
//			entry("apiRouteId", "MATERIAL_SAPATTR_US"),
//			entry("nextOperation", "MaterialUnitOfMeasures")
//		);

//		/*
//		 * Material Unit of Measures
//		 */
//		add("MaterialUnitOfMeasures",
//			entry(DARWIN_SERVICE_URI, context.get("darwin_materialUri")),
//			entry(DARWIN_ENTITY_SET, "UnitOfMeasures"),
//			entry(DARWIN_ENTITY_DESTINATION, context.get("activemq_materialUnitOfMeasure")),
//			entry("apiRouteId", "MATERIAL_UNITOFMEASURE_US"),
//			entry("parentID", "MaterialRid"),
//			entry("nextOperation", "MaterialUsCropHierarchys")
//		);

//		/*
//		 * Material Us Crop Hierarchys
//		 */
//		add("MaterialUsCropHierarchys",
//			entry(DARWIN_SERVICE_URI, context.get("darwin_materialUri")),
//			entry(DARWIN_ENTITY_SET, "UsCropHierarchys"),
//			entry(DARWIN_ENTITY_DESTINATION, context.get("activemq_materialUsCropHierarchy")),
//			entry("apiRouteId", "MATERIAL_CROPHIERACHYS_US"),
//			entry("parentID", "MaterialRid"),
//			entry("nextOperation", "MaterialUsSeedHierarchys")
//		);

//		/*
//		 * Material Us Seed Hierarchys
//		 */
//		add("MaterialUsSeedHierarchys",
//			entry(DARWIN_SERVICE_URI, context.get("darwin_materialUri")),
//			entry(DARWIN_ENTITY_SET, "UsSeedHierarchys"),
//			entry("apiRouteId", "MATERIAL_SEEDHIERARCHY_US"),
//			entry(DARWIN_ENTITY_DESTINATION, context.get("activemq_materialUsSeedHierarchy")),
//			entry("parentID", "MaterialRid")
//		);
	}

	public OperationParameters getParameters(String operationName, String entityId) {
    	Map<String,String> parameters = operationsParameters.get(operationName);
		return new OperationParameters(parameters, entityId);
	}
	
	public OperationParameters getParameters(String operationName, String startTime, String endTime) {
    	Map<String,String> parameters = operationsParameters.get(operationName);

		return new OperationParameters(parameters, startTime, endTime);
	}

	/**
     * 
     */
	private void add(String key, Object [] ... entries) {
		Map<String, String> parameters = Arrays.stream(entries).collect(Collectors.toMap(kv -> (String) kv[0], kv -> (String) kv[1]));
		operationsParameters.put(key, parameters);
	}

	private Object[] entry(Object key, Object value) {
		return new Object[]{key, value};
	}

	public class OperationParameters {
		
		private Map<String, String> parameters;
		
		private boolean isSingle;
		
		private String entityId;

		private String startTime;

		private String endTime;

		public OperationParameters(Map<String, String> parameters, String entityId) {
			this.parameters = parameters;
			this.entityId = entityId;
			this.isSingle = true;
		}

		public OperationParameters(Map<String, String> parameters, String startTime, String endTime) {
			this.parameters = parameters;
			this.startTime = startTime;
			this.endTime = endTime;
			this.isSingle = false;
		}

		/**
	     * 
	     */
	    public String getServiceURI() {
	    	return parameters.get(DARWIN_SERVICE_URI);
	    }

	    public String getPath() {
	    	String path = parameters.get(DARWIN_ENTITY_SET);
	    	String parentId = parameters.get("parentID");
	    	

	    	return path + (parentId == null && isSingle ? "(" + entityId + "L)" : "");
	    }

	    public String getFilter() {
	    	String filter = null;
	    	String parentId = parameters.get("parentID");

	    	if (parentId != null && isSingle) {
	    		filter = parentId + " eq " + entityId + "L";
	    	}
	    	return filter;  // path + (isSingle ? "(" + entityId + "L)" : "");
	    }
	    
	    public String getDestination() {
	    	return parameters.get(DARWIN_ENTITY_DESTINATION);
	    }
	    
	    public String getApiRouteId() {
	    	return parameters.get("apiRouteId");
	    }

	    public String getStartTime() {
	    	return startTime;
	    }

	    public String getEndTime() {
	    	return endTime;
	    }
	    
	    public OperationParameters getNextOperationParameters() {
	    	OperationParameters next = null;
	    	String nextOperation = parameters.get("nextOperation");
	    	if(nextOperation != null) {
	    		if(isSingle) {
	    			next = OperationsParameters.this.getParameters(nextOperation, entityId);
	    		} else {
	    			next = OperationsParameters.this.getParameters(nextOperation, startTime, endTime);
	    		}
	    	}
	    	return  next;
	    }

	    public String getTriggerDestination() {
	    	return (String) context.getProperty(isSingle ? "activemq_triggerSingle" : "activemq_triggerStartQueue");
	    }


	    public String getNextEndpoint() {
	    	String nextOperation = parameters.get("nextOperation");
	    	return nextOperation != null ?  "seda:dispatch" : "direct:stop";
	    }
	    
	    public String toString() {
	    	StringBuilder builder = new StringBuilder();
	    	builder.append("OperationParameters[\n");
	    	builder.append("Parameters: " + parameters + "\n");
	    	builder.append("isSingle: " + isSingle + "\n");
	    	if (isSingle) {
		    	builder.append("entityId: " + entityId+ "\n");
	    	} else {
		    	builder.append("start time: " + startTime + ", end time: " + endTime + "\n");
	    	}
	    	builder.append("]\n");
	    	return builder.toString();
	    }
	}
}
